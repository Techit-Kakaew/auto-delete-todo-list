"use client";

import { Profile } from "@liff/get-profile";
import { Liff } from "@line/liff";
import { useEffect, useState } from "react";
import { initLiff } from "@/lib/liff";

const LineMessage = () => {
  const [profile, setProfile] = useState<Profile>();
  const [liff, setLiff] = useState<Liff>();

  useEffect(() => {
    initLiff().then(async (l) => {
      alert("init");
      setLiff(l);
      alert(JSON.stringify(l?.getContext()));
      await l?.ready;
      const userProfile = await l?.getProfile();
      console.log(JSON.stringify(userProfile));
      setProfile(userProfile);
    });
  }, []);

  const handleSend = async () => {
    try {
      await liff?.ready;
      // if (!liff?.isInClient()) {
      //   alert("‡πÄ‡∏õ‡∏¥‡∏î‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏õ LINE ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ");
      //   return;
      // }

      await liff?.sendMessages([
        {
          type: "text",
          text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡∏≤‡∏Å LIFF App üëã",
        },
      ]);

      alert("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
      // liff.closeWindow(); // ‡∏õ‡∏¥‡∏î LIFF ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    } catch (error) {
      alert(error);
      console.error("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", error);
      alert("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  return (
    <div>
      <h1>Line Message</h1>
      <button
        style={{
          backgroundColor: "green",
          color: "white",
          padding: "10px",
          borderRadius: "5px",
        }}
        onClick={handleSend}
      >
        Send Message To Line
      </button>

      {liff && <pre>{JSON.stringify(liff)}</pre>}
      {liff && <pre>{JSON.stringify(liff.getContext())}</pre>}
      {profile && <pre>{JSON.stringify(profile)}</pre>}
    </div>
  );
};

export default LineMessage;
